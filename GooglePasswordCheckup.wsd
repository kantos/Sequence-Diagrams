@startuml

participant "Browser" as B
participant "Google" as G

note right B
Asymmetric encryption is used, Elliptic Curve Cryptography. So the encryption and decryption keys are not the same,
but in this diagram they are represented by the same letter.

E <sub>G</sub> / D <sub>G</sub> : encrypts/decrypts with Google Key
E <sub>B</sub> / D <sub>B</sub> : encrypts/decrypts with ephemeral Browser key
endnote

== One Time preparation ==


note left G
For each leaked password Google
applies Argon2 and then encrypts with G Key.
"Hash" is Argon2(Password)
endnote 

G -> G: Computes: E <sub>G</sub> (LeakedHash) for each password leaked and stores it.

note left G
For every password leak Google updates this DB. 
endnote
... ...
== User types Password in Browser ==

note right B
When applying Argon2, Google doesn't use a random Salt, but a deterministic salt.
endnote
B -> B: Computes: E <sub>B</sub> (Hash)
B -> G: Sends:\n* E <sub>B</sub> (Hash) \n* leading 2 bytes of Hash

G -> G: Computes: E <sub>G</sub> ( E <sub>B</sub> (Hash) )
G -> B: Receives: \n* E <sub>G</sub> ( E <sub>B</sub> (Hash) ) \n* List of all leaked hashes starting with 2 bytes provided \n* E <sub>G</sub> (LeakedHash)[ ]

B -> B: Computes: D <sub>B</sub> ( E <sub>G</sub> ( E <sub>B</sub> (Hash) ) ) results in --> E <sub>G</sub> ( Hash )
B -> B: Compares all E <sub>G</sub> (LeakedHash)[ ] with\n E <sub>G</sub> ( Hash )

note right B
If there is a match, then the password is a leaked one.
endnote 


@enduml
